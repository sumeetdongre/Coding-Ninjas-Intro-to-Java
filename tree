package binarytree1;
import java.util.*;
import java.util.Scanner;

public class BinaryTreeUse {
	
	private static Scanner s;
	private static Scanner s2;

	public static BinaryTreeNode<Integer> taketreeInputBetter(boolean isRoot,int parentData,boolean isLeft){
		
		if(isRoot){
			System.out.println("enter root data");
		}else{
			if(isLeft){
				System.out.println("enter left child"+ parentData);
			}else{
				System.out.println("enter right child"+ parentData);
			}
		}
		
		s = new Scanner(System.in);
		int rootdata=s.nextInt();
		
		if(rootdata==-1){
			return null;
		}
		
		BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>(rootdata);
		BinaryTreeNode<Integer> leftchild=taketreeInputBetter(false,rootdata,true);
		BinaryTreeNode<Integer> rightchild=taketreeInputBetter(false,rootdata,false);
		root.left=leftchild;
		root.right=rightchild;
		
		return root;
	}
	
	public static BinaryTreeNode<Integer> taketreeInput(){
		System.out.println("enter root data");
		Scanner s=new Scanner(System.in);
		int rootdata=s.nextInt();
		
		if(rootdata==-1){
			return null;
		}
		
		BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>(rootdata);
		BinaryTreeNode<Integer> leftchild=taketreeInput();
		BinaryTreeNode<Integer> rightchild=taketreeInput();
		root.left=leftchild;
		root.right=rightchild;
		
		return root;
	}
	
	public static void printtree(BinaryTreeNode<Integer> root){
		
		if(root==null)
			return;
		
		System.out.print(root.data+" : ");
		if(root.left !=null){
			System.out.print(" L,"+root.left.data);
		}
		if(root.right !=null){
			System.out.print(" R,"+root.right.data);
		}
		
		System.out.println();
		
		printtree(root.left);
		printtree(root.right);
	}
	
	public static int numNodes(BinaryTreeNode<Integer> root){
	
		if(root==null){
			return 0;
		}
		
		int leftcount=numNodes(root.left);
		int rightcount=numNodes(root.right);
		//very important step for countnodes
		return 1+leftcount+rightcount;
	}
	
	public static int largestno(BinaryTreeNode<Integer> root){
		if(root==null)
			return -1;
		int leftlargest=largestno(root.left);
		int rightlargest=largestno(root.right);
		
		if(root.data >leftlargest && root.data >rightlargest)
		{
			return root.data;
		}
		else if(leftlargest >rightlargest){
			return leftlargest;
		}
		else{
			return rightlargest;
		}
	}
	
	public static int noofleaf(BinaryTreeNode<Integer> root){
		if(root==null)
			return 0;
		
		if(root.left==null && root.right==null)
			return 1;
		
		return noofleaf(root.left)+noofleaf(root.right);
	}
	
	public static void printatdepthk(BinaryTreeNode<Integer> root,int k){
		if(root==null){
			return;
		}
		
		if(k==0){
			System.out.println(root.data);
		}
		
		printatdepthk(root.left,k-1);
		printatdepthk(root.right,k-1);
	}
	
	public static boolean isbalanced(BinaryTreeNode<Integer> root){
		if(root==null)
			return true;
		int leftheight=height(root.left);
		int rightheight=height(root.right);
		
		if(Math.abs(leftheight-rightheight)>1){
			return false;
		}
		
		boolean isleftBalanced=isbalanced(root.left);
		boolean isrightBalanced=isbalanced(root.right);
		
		
		return isleftBalanced && isrightBalanced;
		
		
	}
	
	private static int height(BinaryTreeNode<Integer> root) {
		// TODO Auto-generated method stub
		if(root==null){
			return 0;
		}
		int leftheight=height(root.left);
		int rightheight=height(root.right);
		
		return 1+Math.max(leftheight, rightheight);
		
	}
	
	public static BinaryTreeNode<Integer> takeInputLevelWise(){
		s2 = new Scanner(System.in);
		System.out.println("enter root data");
		int rootdata=s2.nextInt();
		
		if(rootdata==-1){
			return null;
		}
		
		BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>(rootdata);
		Queue<BinaryTreeNode<Integer>> pendingchildren=new LinkedList<BinaryTreeNode<Integer>>();
		
		pendingchildren.add(root);
		
		while(!pendingchildren.isEmpty()){
			BinaryTreeNode<Integer> front=pendingchildren.poll();
			System.out.println("enter left child of: " + front.data);
			int left=s2.nextInt();
			if(left!=-1){
				BinaryTreeNode<Integer> leftchild=new BinaryTreeNode<Integer>(left);
				front.left=leftchild;
				pendingchildren.add(leftchild);
			}
			
			
			System.out.println("enter right child of: " + front.data);
			int right=s2.nextInt();
			if(right!=-1){
				BinaryTreeNode<Integer> rightchild=new BinaryTreeNode<Integer>(left);
				front.right=rightchild;
				pendingchildren.add(rightchild);
			}
			
		}
		
		return root;
			
	}
	

	public static void main(String args[]){
		
//		BinaryTreeNode<Integer> root=taketreeInputBetter(true,0,true);	
		BinaryTreeNode<Integer> root=takeInputLevelWise();
		printtree(root);
		
		System.out.println("no of total nodes: "+numNodes(root));
		System.out.println("largest: "+largestno(root));
		System.out.println("no of leaf nodes: "+noofleaf(root));
		System.out.println("print at dephth k");
		printatdepthk(root,2);
		System.out.println(isbalanced(root));
	}
	
}
